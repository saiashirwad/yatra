This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-14T21:09:34.094Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  columns.ts
  table.ts
  utils.ts
.gitignore
biome.json
bun.lock
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/columns.ts
================
type Nullable = { readonly __nullable: true }
type Default<T> = { readonly default: T }
type MinLength<T extends number> = { readonly minLength: T }
type MaxLength<T extends number> = { readonly maxLength: T }
type Format<T extends string> = { readonly format: T }
type Enum<T extends unknown[]> = { readonly enum: T }
type Min<T extends number> = { readonly min: T }
type Max<T extends number> = { readonly max: T }
type Integer = { readonly integer: true }

export function extend<This, Brand>(
	instance: This,
	propertyName: string,
	propertyValue: unknown,
): This & Brand {
	const newInstance = Object.create(Object.getPrototypeOf(instance))

	Object.assign(newInstance, instance)
	;(newInstance as any)[propertyName] = propertyValue

	return newInstance as This & Brand
}

export type ColumnType = "string" | "number" | "date" | "literal"

export class Column<T extends ColumnType, DataType> {
	readonly type: T

	constructor(type: T) {
		this.type = type
	}

	nullable(): this & Nullable {
		return extend<this, Nullable>(this, "__nullable", true)
	}

	default<V extends DataType>(value: V): this & Default<V> {
		return extend<this, Default<V>>(this, "default", value)
	}

	getConfig(): Record<string, unknown> {
		const config: Record<string, unknown> = { type: this.type }

		for (const key in this) {
			if (key !== "type" && !key.startsWith("_") && typeof (this as any)[key] !== "function") {
				config[key] = (this as any)[key]
			}
		}

		return config
	}
}

export type StringFormat = "uuid" | "json"

export class StringColumn extends Column<"string", string> {
	constructor() {
		super("string")
	}

	minLength<T extends number>(length: T): this & MinLength<T> {
		return extend<this, MinLength<T>>(this, "minLength", length)
	}

	maxLength<T extends number>(length: T): this & MaxLength<T> {
		return extend<this, MaxLength<T>>(this, "maxLength", length)
	}

	format<T extends StringFormat>(formatType: T): this & Format<T> {
		return extend<this, Format<T>>(this, "format", formatType)
	}

	enum<T extends unknown[]>(values: T): this & Enum<T> {
		return extend<this, Enum<T>>(this, "enum", values)
	}
}

export class NumberColumn extends Column<"number", number> {
	constructor() {
		super("number")
	}

	min<T extends number>(value: T): this & Min<T> {
		return extend<this, Min<T>>(this, "min", value)
	}

	max<T extends number>(value: T): this & Max<T> {
		return extend<this, Max<T>>(this, "max", value)
	}

	integer(): this & Integer {
		return extend<this, Integer>(this, "integer", true)
	}
}

export type DateDataType = Date | number

export class DateColumn extends Column<"date", DateDataType> {
	constructor() {
		super("date")
	}
}

export type LiteralFieldType = string | number | boolean

export class LiteralColumn<T extends LiteralFieldType> extends Column<"literal", T> {
	readonly literalValue: T

	constructor(value: T) {
		super("literal")
		this.literalValue = value
	}
}

export function string(): StringColumn {
	return new StringColumn()
}

export function number(): NumberColumn {
	return new NumberColumn()
}

export function date(): DateColumn {
	return new DateColumn()
}

export function literal<T extends LiteralFieldType>(value: T): LiteralColumn<T> {
	return new LiteralColumn(value)
}

export type GetColumnType<T> = T extends Column<infer Type, any> ? Type : never
export type GetDataType<T> = T extends Column<any, infer DataType> ? DataType : never
export type IsNullable<T> = T extends Nullable ? true : false
export type GetDefault<T> = T extends Default<infer V> ? V : undefined
export type GetMinLength<T> = T extends MinLength<infer V> ? V : undefined
export type GetMaxLength<T> = T extends MaxLength<infer V> ? V : undefined

================
File: src/table.ts
================
import { Column, string } from "./columns"
import { type Constructor } from "./utils"

export function member<
	Co extends Constructor,
	Instance extends InstanceType<Co>,
	K extends keyof Instance,
>(c: Co, key: K): Instance[K] {
	return new c()[key]
}

type ManyToOne<VirtualField, Ref, ForeignKey> = {
	kind: "many-to-one"
	virtualField: VirtualField
	ref: Ref
	foreignKey: ForeignKey
}

type OneToMany<Ref> = {
	kind: "one-to-many"
	ref: Ref
}

type OneToOne<VirtualField, Ref, ForeignKey> = {
	kind: "one-to-one"
	virtualField: VirtualField
	ref: Ref
	foreignKey: ForeignKey
}

export type Relation = ManyToOne<any, any, any> | OneToMany<any> | OneToOne<any, any, any>

interface RelationBuilder<F extends Record<string, Column<any, any>>> {
	manyToOne: <
		Ref extends () => { fields: any },
		VF extends keyof F,
		FK extends keyof ReturnType<Ref>["fields"],
	>(
		virtualField: VF,
		ref: Ref,
		foreignKey: FK,
	) => ManyToOne<VF, Ref, FK>

	oneToMany: <Ref extends () => any>(ref: Ref) => OneToMany<Ref>

	oneToOne: <
		Ref extends () => { fields: any },
		VF extends keyof F,
		FK extends keyof ReturnType<Ref>["fields"],
	>(
		virtualField: VF,
		ref: Ref,
		foreignKey: FK,
	) => OneToOne<VF, Ref, FK>

	fields: F
}

type TableConstructor<F, R> = {
	new (): { fields: F; relations: R }
	fields: F
	relations: R
}

function createRelationBuilder<F extends Record<string, Column<any, any>>>(
	fields: F,
): RelationBuilder<F> {
	return {
		manyToOne: (virtualField, ref, foreignKey) => ({
			kind: "many-to-one" as const,
			virtualField,
			ref,
			foreignKey,
		}),

		oneToMany: (ref) => ({
			kind: "one-to-many" as const,
			ref,
		}),

		oneToOne: (virtualField, ref, foreignKey) => ({
			kind: "one-to-one" as const,
			virtualField,
			ref,
			foreignKey,
		}),

		fields,
	}
}

function Table<
	const TableName extends string,
	const Fields extends Record<string, Column<any, any>>,
	const Relations extends Record<string, Relation> = Record<string, never>,
>(
	tableName: TableName,
	_fields: Fields,
	relationsFn?: (rel: RelationBuilder<Fields>) => Relations,
) {
	class TableClass {
		public relations: Relations
		constructor(
			public name: TableName = tableName,
			public fields: Fields = _fields,
		) {
			this.relations = relationsFn ? relationsFn(createRelationBuilder(_fields)) : ({} as Relations)
		}
	}

	return TableClass as unknown as TableConstructor<Fields, Relations>
}

class Book extends Table(
	"book",
	{
		id: string(),
		authorId: string(),
		description: string().default("what"),
	},
	(t) => ({
		author: t.manyToOne("authorId", () => User, "id"),
	}),
) {}

class User extends Table(
	"user",
	{
		id: string(),
		name: string().maxLength(5).nullable().default("texo"),
		siblingId: string().nullable(),
	},
	(t) => ({
		books: t.oneToMany(() => Book),
	}),
) {}

================
File: src/utils.ts
================
export type Clean<T> = { [k in keyof T]: T[k] } & unknown

export type Class<O extends Record<string, unknown>> = {
	new (): InstanceType<new () => O>
}

export type Constructor<Args = any, ReturnType = any> = new (...args: Args[]) => ReturnType

export function member<
	Co extends Constructor,
	Instance extends InstanceType<Co>,
	K extends keyof Instance,
>(c: Co, key: K): Instance[K] {
	return new c()[key]
}

================
File: .gitignore
================
# dependencies (bun install)
node_modules

# output
out
dist
*.tgz

# code coverage
coverage
*.lcov

# logs
logs
_.log
report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# caches
.eslintcache
.cache
*.tsbuildinfo

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": []
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "tab"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double",
      "lineWidth": 100,
      "semicolons": "asNeeded",
      "trailingCommas": "all"
    }
  }
}

================
File: bun.lock
================
{
  "lockfileVersion": 1,
  "workspaces": {
    "": {
      "name": "dbschema",
      "devDependencies": {
        "@biomejs/biome": "^1.9.4",
        "@types/bun": "latest",
      },
      "peerDependencies": {
        "typescript": "^5",
      },
    },
  },
  "packages": {
    "@biomejs/biome": ["@biomejs/biome@1.9.4", "", { "optionalDependencies": { "@biomejs/cli-darwin-arm64": "1.9.4", "@biomejs/cli-darwin-x64": "1.9.4", "@biomejs/cli-linux-arm64": "1.9.4", "@biomejs/cli-linux-arm64-musl": "1.9.4", "@biomejs/cli-linux-x64": "1.9.4", "@biomejs/cli-linux-x64-musl": "1.9.4", "@biomejs/cli-win32-arm64": "1.9.4", "@biomejs/cli-win32-x64": "1.9.4" }, "bin": { "biome": "bin/biome" } }, "sha512-1rkd7G70+o9KkTn5KLmDYXihGoTaIGO9PIIN2ZB7UJxFrWw04CZHPYiMRjYsaDvVV7hP1dYNRLxSANLaBFGpog=="],

    "@biomejs/cli-darwin-arm64": ["@biomejs/cli-darwin-arm64@1.9.4", "", { "os": "darwin", "cpu": "arm64" }, "sha512-bFBsPWrNvkdKrNCYeAp+xo2HecOGPAy9WyNyB/jKnnedgzl4W4Hb9ZMzYNbf8dMCGmUdSavlYHiR01QaYR58cw=="],

    "@biomejs/cli-darwin-x64": ["@biomejs/cli-darwin-x64@1.9.4", "", { "os": "darwin", "cpu": "x64" }, "sha512-ngYBh/+bEedqkSevPVhLP4QfVPCpb+4BBe2p7Xs32dBgs7rh9nY2AIYUL6BgLw1JVXV8GlpKmb/hNiuIxfPfZg=="],

    "@biomejs/cli-linux-arm64": ["@biomejs/cli-linux-arm64@1.9.4", "", { "os": "linux", "cpu": "arm64" }, "sha512-fJIW0+LYujdjUgJJuwesP4EjIBl/N/TcOX3IvIHJQNsAqvV2CHIogsmA94BPG6jZATS4Hi+xv4SkBBQSt1N4/g=="],

    "@biomejs/cli-linux-arm64-musl": ["@biomejs/cli-linux-arm64-musl@1.9.4", "", { "os": "linux", "cpu": "arm64" }, "sha512-v665Ct9WCRjGa8+kTr0CzApU0+XXtRgwmzIf1SeKSGAv+2scAlW6JR5PMFo6FzqqZ64Po79cKODKf3/AAmECqA=="],

    "@biomejs/cli-linux-x64": ["@biomejs/cli-linux-x64@1.9.4", "", { "os": "linux", "cpu": "x64" }, "sha512-lRCJv/Vi3Vlwmbd6K+oQ0KhLHMAysN8lXoCI7XeHlxaajk06u7G+UsFSO01NAs5iYuWKmVZjmiOzJ0OJmGsMwg=="],

    "@biomejs/cli-linux-x64-musl": ["@biomejs/cli-linux-x64-musl@1.9.4", "", { "os": "linux", "cpu": "x64" }, "sha512-gEhi/jSBhZ2m6wjV530Yy8+fNqG8PAinM3oV7CyO+6c3CEh16Eizm21uHVsyVBEB6RIM8JHIl6AGYCv6Q6Q9Tg=="],

    "@biomejs/cli-win32-arm64": ["@biomejs/cli-win32-arm64@1.9.4", "", { "os": "win32", "cpu": "arm64" }, "sha512-tlbhLk+WXZmgwoIKwHIHEBZUwxml7bRJgk0X2sPyNR3S93cdRq6XulAZRQJ17FYGGzWne0fgrXBKpl7l4M87Hg=="],

    "@biomejs/cli-win32-x64": ["@biomejs/cli-win32-x64@1.9.4", "", { "os": "win32", "cpu": "x64" }, "sha512-8Y5wMhVIPaWe6jw2H+KlEm4wP/f7EW3810ZLmDlrEEy5KvBsb9ECEfu/kMWD484ijfQ8+nIi0giMgu9g1UAuuA=="],

    "@types/bun": ["@types/bun@1.2.4", "", { "dependencies": { "bun-types": "1.2.4" } }, "sha512-QtuV5OMR8/rdKJs213iwXDpfVvnskPXY/S0ZiFbsTjQZycuqPbMW8Gf/XhLfwE5njW8sxI2WjISURXPlHypMFA=="],

    "@types/node": ["@types/node@22.13.10", "", { "dependencies": { "undici-types": "~6.20.0" } }, "sha512-I6LPUvlRH+O6VRUqYOcMudhaIdUVWfsjnZavnsraHvpBwaEyMN29ry+0UVJhImYL16xsscu0aske3yA+uPOWfw=="],

    "@types/ws": ["@types/ws@8.5.14", "", { "dependencies": { "@types/node": "*" } }, "sha512-bd/YFLW+URhBzMXurx7lWByOu+xzU9+kb3RboOteXYDfW+tr+JZa99OyNmPINEGB/ahzKrEuc8rcv4gnpJmxTw=="],

    "bun-types": ["bun-types@1.2.4", "", { "dependencies": { "@types/node": "*", "@types/ws": "~8.5.10" } }, "sha512-nDPymR207ZZEoWD4AavvEaa/KZe/qlrbMSchqpQwovPZCKc7pwMoENjEtHgMKaAjJhy+x6vfqSBA1QU3bJgs0Q=="],

    "typescript": ["typescript@5.8.2", "", { "bin": { "tsc": "bin/tsc", "tsserver": "bin/tsserver" } }, "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ=="],

    "undici-types": ["undici-types@6.20.0", "", {}, "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg=="],
  }
}

================
File: package.json
================
{
	"name": "yatra",
	"module": "index.ts",
	"type": "module",
	"private": true,
	"devDependencies": {
		"@biomejs/biome": "^1.9.4",
		"@types/bun": "latest"
	},
	"peerDependencies": {
		"typescript": "^5"
	}
}

================
File: README.md
================
# yatra

## goals

================
File: tsconfig.json
================
{
	"compilerOptions": {
		// Enable latest features
		"lib": ["ESNext", "DOM"],
		"target": "ESNext",
		"module": "ESNext",
		"moduleDetection": "force",
		"jsx": "react-jsx",
		"allowJs": true,

		// Bundler mode
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"verbatimModuleSyntax": true,
		"noEmit": true,

		// Best practices
		"strict": true,
		"skipLibCheck": true,
		"noFallthroughCasesInSwitch": true,

		// Some stricter flags (disabled by default)
		"noUnusedLocals": false,
		"noUnusedParameters": false,
		"noPropertyAccessFromIndexSignature": false
	}
}
