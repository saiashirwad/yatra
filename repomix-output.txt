This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-13T16:03:27.478Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  columns.ts
  table.ts
  utils.ts
.gitignore
biome.json
bun.lock
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/columns.ts
================
import type { Clean } from "./utils"

function updateOptions<
	T extends { options: Record<string, unknown> },
	KV extends { [k: string]: unknown },
>(r: T, kv: KV): Clean<T & { options: KV }> {
	return {
		...r,
		options: { ...r.options, ...kv },
	}
}

export type BaseColumnOptions<FieldType extends string, DataType> = {
	name: FieldType
	__nullable?: boolean
	__default?: DataType
}

export interface BaseColumn<
	FieldType extends string,
	DataType,
	options extends BaseColumnOptions<FieldType, DataType> = {
		name: FieldType
	},
> {
	options: BaseColumnOptions<FieldType, DataType>
	nullable: () => BaseColumn<FieldType, DataType, Clean<options & { __nullable: true }>>
	default: <V extends DataType>(
		value: V,
	) => BaseColumn<FieldType, DataType, Clean<options & { __default: V }>>
}

export function BaseColumn<
	const FieldType extends string,
	DataType = unknown,
	Options extends BaseColumnOptions<FieldType, DataType> = {
		name: FieldType
	},
>(name: FieldType, defaultOptions?: Options): BaseColumn<FieldType, DataType, Options> {
	const options = {
		name,
		...(defaultOptions ?? {}),
	}
	return {
		options,
		nullable() {
			return updateOptions(this, {
				__nullable: true,
			})
		},
		default<U extends DataType>(value: U) {
			return updateOptions(this, {
				__default: value,
			})
		},
	}
}

type StringFormat = "uuid" | "json"

type StringColumnOptions = BaseColumnOptions<"string", string> & {
	__minLength?: number
	__maxLength?: number
	__format?: StringFormat
	__enum?: unknown[]
}

type StringColumn<
	Options extends StringColumnOptions = {
		name: "string"
	},
> = BaseColumn<"string", string, Options> & {
	minLength: <T extends number>(length: T) => StringColumn<Clean<Options & { __minLength: T }>>
	maxLength: <T extends number>(length: T) => StringColumn<Clean<Options & { __maxLength: T }>>
	format: <T extends StringFormat>(format: T) => StringColumn<Clean<Options & { __format: T }>>
	enum: <T extends unknown[]>(values: T) => StringColumn<Clean<Options & { __enum: T }>>
}

export function string(): StringColumn {
	return {
		...BaseColumn<"string", string>("string"),
		minLength(value) {
			return updateOptions(this, {
				__minLength: value,
			})
		},
		maxLength(value) {
			return updateOptions(this, {
				__maxLength: value,
			})
		},
		format(format) {
			return updateOptions(this, {
				__format: format,
			})
		},
		enum(values) {
			return updateOptions(this, {
				__enum: values,
			})
		},
	}
}

type LiteralFieldType = string | number | boolean

type LiteralColumn<DataType extends LiteralFieldType> = BaseColumn<"literal", DataType>

export function literal<const DataType extends LiteralFieldType>(
	value: DataType,
): LiteralColumn<DataType> {
	const base = BaseColumn<`literal`, DataType, { name: "literal"; __literalValue: DataType }>(
		"literal",
		{
			name: "literal",
			__literalValue: value,
		},
	)
	return {
		...base,
		options: {
			...base.options,
		},
	}
}

type NumberColumnOptions = BaseColumnOptions<"number", number> & {
	__min?: number
	__max?: number
	__integer?: boolean
}

type NumberColumn<
	Options extends NumberColumnOptions = {
		name: "number"
	},
> = BaseColumn<"number", number, Options> & {
	min: <V extends number>(value: V) => NumberColumn<Clean<Options & { __min: V }>>
	max: <V extends number>(value: V) => NumberColumn<Clean<Options & { __max: V }>>
	integer: () => NumberColumn<Clean<Options & { __integer: true }>>
}

export function number(): NumberColumn {
	const base = BaseColumn<"number", number>("number")

	return {
		...base,
		min(value) {
			return updateOptions(this, {
				__min: value,
			})
		},
		max(value) {
			return updateOptions(this, {
				__max: value,
			})
		},
		integer() {
			return updateOptions(this, {
				__integer: true,
			})
		},
	}
}

type DateDataType = Date | number
type DateColumnOptions = BaseColumnOptions<"date", DateDataType> & {}

type DateColumn<
	Options extends DateColumnOptions = {
		name: "date"
	},
> = BaseColumn<"date", DateDataType, Options> & {}

export function date(): DateColumn {
	const base = BaseColumn<"date", DateDataType>("date")

	return {
		...base,
	}
}

================
File: src/table.ts
================
import { BaseColumn, string } from "./columns"
import { type Constructor } from "./utils"

export function member<
	Co extends Constructor,
	Instance extends InstanceType<Co>,
	K extends keyof Instance,
>(c: Co, key: K): Instance[K] {
	return new c()[key]
}

type ManyToOne<VirtualField, Ref, foreignKey> = {
	kind: "many-to-one"
	virtualField: VirtualField
	ref: Ref
	foreignKey: foreignKey
}

function ManyToOne<
	Ref extends () => { fields: any },
	VirtualField extends string,
	FK extends keyof ReturnType<Ref>["fields"],
>(ref: Ref, virtualField: VirtualField, foreignKey: FK): ManyToOne<VirtualField, Ref, FK> {
	return {
		kind: "many-to-one",
		virtualField,
		ref,
		foreignKey,
	}
}

type OneToMany<Ref> = {
	kind: "one-to-many"
	ref: Ref
}

function OneToMany<Ref extends () => any>(ref: Ref): OneToMany<Ref> {
	return {
		kind: "one-to-many",
		ref,
	}
}

type Relation = ManyToOne<any, any, any> | OneToMany<any>

type TableConstructor<F, R> = {
	new (): { fields: F; relations: R }
	fields: F
	relations: R
}

function Table<
	const TableName extends string,
	const Fields extends Record<string, BaseColumn<any, any, any>>,
	const Relations extends Record<string, Relation>,
>(tableName: TableName, _fields: Fields, _relations: Relations = {} as Relations) {
	class TableClass {
		constructor(
			public name: TableName = tableName,
			public fields: Fields = _fields,
			public relations: Relations = _relations,
		) {}
	}

	return TableClass as unknown as TableConstructor<Fields, Relations>
}

class User extends Table(
	"user",
	{
		id: string(),
		name: string().maxLength(5).nullable().default("texo"),
	},
	{
		books: OneToMany(() => Book),
	},
) {}

class Book extends Table(
	"book",
	{
		id: string(),
		authorId: string(),
	},
	{
		author: ManyToOne(() => User, "authorId", "id"),
	},
) {}

================
File: src/utils.ts
================
export type Clean<T> = { [k in keyof T]: T[k] } & unknown

export type Class<O extends Record<string, unknown>> = {
	new (): InstanceType<new () => O>
}

export type Constructor<Args = any, ReturnType = any> = new (
	...args: Args[]
) => ReturnType

export function member<
	Co extends Constructor,
	Instance extends InstanceType<Co>,
	K extends keyof Instance,
>(c: Co, key: K): Instance[K] {
	return new c()[key]
}

================
File: .gitignore
================
# dependencies (bun install)
node_modules

# output
out
dist
*.tgz

# code coverage
coverage
*.lcov

# logs
logs
_.log
report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# caches
.eslintcache
.cache
*.tsbuildinfo

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": []
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "tab"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double",
      "lineWidth": 100,
      "semicolons": "asNeeded",
      "trailingCommas": "all"
    }
  }
}

================
File: bun.lock
================
{
  "lockfileVersion": 1,
  "workspaces": {
    "": {
      "name": "dbschema",
      "devDependencies": {
        "@biomejs/biome": "^1.9.4",
        "@types/bun": "latest",
      },
      "peerDependencies": {
        "typescript": "^5",
      },
    },
  },
  "packages": {
    "@biomejs/biome": ["@biomejs/biome@1.9.4", "", { "optionalDependencies": { "@biomejs/cli-darwin-arm64": "1.9.4", "@biomejs/cli-darwin-x64": "1.9.4", "@biomejs/cli-linux-arm64": "1.9.4", "@biomejs/cli-linux-arm64-musl": "1.9.4", "@biomejs/cli-linux-x64": "1.9.4", "@biomejs/cli-linux-x64-musl": "1.9.4", "@biomejs/cli-win32-arm64": "1.9.4", "@biomejs/cli-win32-x64": "1.9.4" }, "bin": { "biome": "bin/biome" } }, "sha512-1rkd7G70+o9KkTn5KLmDYXihGoTaIGO9PIIN2ZB7UJxFrWw04CZHPYiMRjYsaDvVV7hP1dYNRLxSANLaBFGpog=="],

    "@biomejs/cli-darwin-arm64": ["@biomejs/cli-darwin-arm64@1.9.4", "", { "os": "darwin", "cpu": "arm64" }, "sha512-bFBsPWrNvkdKrNCYeAp+xo2HecOGPAy9WyNyB/jKnnedgzl4W4Hb9ZMzYNbf8dMCGmUdSavlYHiR01QaYR58cw=="],

    "@biomejs/cli-darwin-x64": ["@biomejs/cli-darwin-x64@1.9.4", "", { "os": "darwin", "cpu": "x64" }, "sha512-ngYBh/+bEedqkSevPVhLP4QfVPCpb+4BBe2p7Xs32dBgs7rh9nY2AIYUL6BgLw1JVXV8GlpKmb/hNiuIxfPfZg=="],

    "@biomejs/cli-linux-arm64": ["@biomejs/cli-linux-arm64@1.9.4", "", { "os": "linux", "cpu": "arm64" }, "sha512-fJIW0+LYujdjUgJJuwesP4EjIBl/N/TcOX3IvIHJQNsAqvV2CHIogsmA94BPG6jZATS4Hi+xv4SkBBQSt1N4/g=="],

    "@biomejs/cli-linux-arm64-musl": ["@biomejs/cli-linux-arm64-musl@1.9.4", "", { "os": "linux", "cpu": "arm64" }, "sha512-v665Ct9WCRjGa8+kTr0CzApU0+XXtRgwmzIf1SeKSGAv+2scAlW6JR5PMFo6FzqqZ64Po79cKODKf3/AAmECqA=="],

    "@biomejs/cli-linux-x64": ["@biomejs/cli-linux-x64@1.9.4", "", { "os": "linux", "cpu": "x64" }, "sha512-lRCJv/Vi3Vlwmbd6K+oQ0KhLHMAysN8lXoCI7XeHlxaajk06u7G+UsFSO01NAs5iYuWKmVZjmiOzJ0OJmGsMwg=="],

    "@biomejs/cli-linux-x64-musl": ["@biomejs/cli-linux-x64-musl@1.9.4", "", { "os": "linux", "cpu": "x64" }, "sha512-gEhi/jSBhZ2m6wjV530Yy8+fNqG8PAinM3oV7CyO+6c3CEh16Eizm21uHVsyVBEB6RIM8JHIl6AGYCv6Q6Q9Tg=="],

    "@biomejs/cli-win32-arm64": ["@biomejs/cli-win32-arm64@1.9.4", "", { "os": "win32", "cpu": "arm64" }, "sha512-tlbhLk+WXZmgwoIKwHIHEBZUwxml7bRJgk0X2sPyNR3S93cdRq6XulAZRQJ17FYGGzWne0fgrXBKpl7l4M87Hg=="],

    "@biomejs/cli-win32-x64": ["@biomejs/cli-win32-x64@1.9.4", "", { "os": "win32", "cpu": "x64" }, "sha512-8Y5wMhVIPaWe6jw2H+KlEm4wP/f7EW3810ZLmDlrEEy5KvBsb9ECEfu/kMWD484ijfQ8+nIi0giMgu9g1UAuuA=="],

    "@types/bun": ["@types/bun@1.2.4", "", { "dependencies": { "bun-types": "1.2.4" } }, "sha512-QtuV5OMR8/rdKJs213iwXDpfVvnskPXY/S0ZiFbsTjQZycuqPbMW8Gf/XhLfwE5njW8sxI2WjISURXPlHypMFA=="],

    "@types/node": ["@types/node@22.13.10", "", { "dependencies": { "undici-types": "~6.20.0" } }, "sha512-I6LPUvlRH+O6VRUqYOcMudhaIdUVWfsjnZavnsraHvpBwaEyMN29ry+0UVJhImYL16xsscu0aske3yA+uPOWfw=="],

    "@types/ws": ["@types/ws@8.5.14", "", { "dependencies": { "@types/node": "*" } }, "sha512-bd/YFLW+URhBzMXurx7lWByOu+xzU9+kb3RboOteXYDfW+tr+JZa99OyNmPINEGB/ahzKrEuc8rcv4gnpJmxTw=="],

    "bun-types": ["bun-types@1.2.4", "", { "dependencies": { "@types/node": "*", "@types/ws": "~8.5.10" } }, "sha512-nDPymR207ZZEoWD4AavvEaa/KZe/qlrbMSchqpQwovPZCKc7pwMoENjEtHgMKaAjJhy+x6vfqSBA1QU3bJgs0Q=="],

    "typescript": ["typescript@5.8.2", "", { "bin": { "tsc": "bin/tsc", "tsserver": "bin/tsserver" } }, "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ=="],

    "undici-types": ["undici-types@6.20.0", "", {}, "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg=="],
  }
}

================
File: package.json
================
{
	"name": "yatra",
	"module": "index.ts",
	"type": "module",
	"private": true,
	"devDependencies": {
		"@biomejs/biome": "^1.9.4",
		"@types/bun": "latest"
	},
	"peerDependencies": {
		"typescript": "^5"
	}
}

================
File: README.md
================
# yatra

## goals

================
File: tsconfig.json
================
{
	"compilerOptions": {
		// Enable latest features
		"lib": ["ESNext", "DOM"],
		"target": "ESNext",
		"module": "ESNext",
		"moduleDetection": "force",
		"jsx": "react-jsx",
		"allowJs": true,

		// Bundler mode
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"verbatimModuleSyntax": true,
		"noEmit": true,

		// Best practices
		"strict": true,
		"skipLibCheck": true,
		"noFallthroughCasesInSwitch": true,

		// Some stricter flags (disabled by default)
		"noUnusedLocals": false,
		"noUnusedParameters": false,
		"noPropertyAccessFromIndexSignature": false
	}
}
